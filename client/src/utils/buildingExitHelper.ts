// Funciones auxiliares para la salida segura de edificios
import { usePlayerStore } from "../stores/usePlayerStore";
import { useGameStateStore } from "../stores/useGameStateStore";

// Posiciones de salida seguras (colocadas a una distancia mucho mayor para evitar el √°rea de colisi√≥n)
// Estas posiciones aseguran que el jugador no quede atrapado en el √°rea de colisi√≥n de las puertas
export const SAFE_EXIT_POSITIONS = {
  market: { x: -5, y: 0, z: 7 },    // Posici√≥n segura lejos del mercado
  kitchen: { x: 5, y: 0, z: 7 },    // Posici√≥n segura lejos de la cocina
  garden: { x: 0, y: 0, z: -7 },    // Posici√≥n segura lejos del huerto
  default: { x: 0, y: 0, z: -5 }    // Posici√≥n central del mapa
};

/**
 * Funci√≥n segura para salir de cualquier edificio
 * Esta funci√≥n:
 * 1. Coloca al jugador en una posici√≥n segura lejos de las puertas
 * 2. Cambia el estado del juego a "playing"
 * 3. Limpia cualquier estado espec√≠fico del edificio
 * 
 * @param buildingType Tipo de edificio del que estamos saliendo
 */
export function safeExit(buildingType: string) {
  // Obtener las funciones del store global
  const { setGameState } = useGameStateStore.getState();
  const { setPlayerPosition, updatePlayer, playerData } = usePlayerStore.getState();
  
  console.log(`üö™ Saliendo de ${buildingType} usando el m√©todo de salida segura`);
  
  // Seleccionar la posici√≥n segura seg√∫n el edificio
  const safePosition = SAFE_EXIT_POSITIONS[buildingType as keyof typeof SAFE_EXIT_POSITIONS] || 
                      SAFE_EXIT_POSITIONS.default;
  
  // Establecer la posici√≥n del jugador
  setPlayerPosition(safePosition);
  
  // Limpiar cualquier estado del edificio anterior
  if (playerData) {
    updatePlayer({
      ...playerData,
      lastGardenAction: undefined
      // Aqu√≠ podemos a√±adir m√°s limpiezas de estado si son necesarias
    });
  }
  
  // Cambiar el estado del juego a "playing"
  setGameState("playing");
  
  console.log(`‚úÖ Jugador reposicionado en posici√≥n segura:`, safePosition);
}